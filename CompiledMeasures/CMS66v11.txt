=============================================================================================================================================================================
Initial Population:
exists ( ( [("Encounter, Performed: Outpatient Consultation" using "Outpatient Consultation (2.16.840.1.113883.3.464.1003.101.12.1008)")]
    union [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
    union [("Encounter, Performed: Postoperative follow-up visit, normally included in the surgical package, to indicate that an evaluation and management service was performed during a postoperative period for a reason(s) related to the original procedure" using "Postoperative follow-up visit, normally included in the surgical package, to indicate that an evaluation and management service was performed during a postoperative period for a reason(s) related to the original procedure (CPT Code 99024)")]
    union [("Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)")]
    union [("Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)")] ) ValidEncounters
    where ValidEncounters.relevantPeriod during day of Measurement Period
)
  and exists ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period )
  and AgeInYearsAt(date from start of Measurement Period)>= 19
=============================================================================================================================================================================
Denominator:
exists ( ( [("Encounter, Performed: Outpatient Consultation" using "Outpatient Consultation (2.16.840.1.113883.3.464.1003.101.12.1008)")]
    union [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
    union [("Encounter, Performed: Postoperative follow-up visit, normally included in the surgical package, to indicate that an evaluation and management service was performed during a postoperative period for a reason(s) related to the original procedure" using "Postoperative follow-up visit, normally included in the surgical package, to indicate that an evaluation and management service was performed during a postoperative period for a reason(s) related to the original procedure (CPT Code 99024)")]
    union [("Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)")]
    union [("Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)")] ) ValidEncounters
    where ValidEncounters.relevantPeriod during day of Measurement Period
)
  and exists ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period )
  and AgeInYearsAt(date from start of Measurement Period)>= 19
=============================================================================================================================================================================
Denominator Exclusions:
Hospice.exists ( [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
    where ( InpatientEncounter.dischargeDisposition ~ (code "Discharge to home for hospice care (procedure)" ("SNOMEDCT Code (428361000124107)"))
        or InpatientEncounter.dischargeDisposition ~ (code "Discharge to healthcare facility for hospice care (procedure)" ("SNOMEDCT Code (428371000124100)"))
    )
      and InpatientEncounter.relevantPeriod ends during day of Measurement Period
)
  or exists ( [("Encounter, Performed: Hospice Encounter" using "Hospice Encounter (2.16.840.1.113883.3.464.1003.1003)")] HospiceEncounter
      where HospiceEncounter.relevantPeriod overlaps Measurement Period
  )
  or exists ( [("Assessment, Performed: Hospice care [Minimum Data Set]" using "Hospice care [Minimum Data Set] (LOINC Code 45755-6)")] HospiceAssessment
      where HospiceAssessment.result ~ (code "Yes (qualifier value)" ("SNOMEDCT Code (373066001)"))
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospiceAssessment.relevantDatetime, HospiceAssessment.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( [("Intervention, Order: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)")] HospiceOrder
      where HospiceOrder.authorDatetime during day of Measurement Period
  )
  or exists ( [("Intervention, Performed: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)")] HospicePerformed
      where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospicePerformed.relevantDatetime, HospicePerformed.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    where Count([("Diagnosis: Lower Body Fracture" using "Lower Body Fracture (2.16.840.1.113883.3.464.1003.113.12.1037)")] LowerBodyFracture
        where LowerBodyFracture.prevalencePeriod starts 24 hours or less on or before start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod)
    )>= 2
)
  or exists ( [("Diagnosis: Severe dementia (disorder)" using "Severe dementia (disorder) (SNOMEDCT Code 428351000124105)")] Dementia
    where Dementia.prevalencePeriod overlaps Measurement Period
)
=============================================================================================================================================================================
Numerator:
exists ( ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    return if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) ) TotalKnee
    with from
  [("Assessment, Performed: Quality of life score [KOOS]" using "Quality of life score [KOOS] (LOINC Code 72098-7)")] KOOSLifeQuality,
  [("Assessment, Performed: Sport-recreation score [KOOS]" using "Sport-recreation score [KOOS] (LOINC Code 72099-5)")] KOOSSport,
  [("Assessment, Performed: Activities of daily living score [KOOS]" using "Activities of daily living score [KOOS] (LOINC Code 72100-1)")] KOOSActivityScore,
  [("Assessment, Performed: Symptoms score [KOOS]" using "Symptoms score [KOOS] (LOINC Code 72101-9)")] KOOSSymptoms,
  [("Assessment, Performed: Pain score [KOOS]" using "Pain score [KOOS] (LOINC Code 72102-7)")] KOOSPain
  let KOOSLifeQualityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSLifeQuality.relevantDatetime, KOOSLifeQuality.relevantPeriod ),
  KOOSSportTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSSport.relevantDatetime, KOOSSport.relevantPeriod ),
  KOOSActivityScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSActivityScore.relevantDatetime, KOOSActivityScore.relevantPeriod ),
  KOOSSymptomsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSSymptoms.relevantDatetime, KOOSSymptoms.relevantPeriod ),
  KOOSPainTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSPain.relevantDatetime, KOOSPain.relevantPeriod )
  where KOOSLifeQualityTime same day as KOOSSportTime
    and KOOSSport.result is not null
    and KOOSLifeQualityTime same day as KOOSActivityScoreTime
    and KOOSActivityScore.result is not null
    and KOOSLifeQualityTime same day as KOOSSymptomsTime
    and KOOSSymptoms.result is not null
    and KOOSLifeQualityTime same day as KOOSPainTime
    and KOOSPain.result is not null
    and KOOSLifeQuality.result is not null
  return Max({ KOOSLifeQualityTime, KOOSSportTime, KOOSActivityScoreTime, KOOSSymptomsTime, KOOSPainTime }) InitialKOOSAssessmentTime
      such that TotalKnee starts 90 days or less on or after InitialKOOSAssessmentTime
    with from
  [("Assessment, Performed: Quality of life score [KOOS]" using "Quality of life score [KOOS] (LOINC Code 72098-7)")] KOOSLifeQuality,
  [("Assessment, Performed: Sport-recreation score [KOOS]" using "Sport-recreation score [KOOS] (LOINC Code 72099-5)")] KOOSSport,
  [("Assessment, Performed: Activities of daily living score [KOOS]" using "Activities of daily living score [KOOS] (LOINC Code 72100-1)")] KOOSActivityScore,
  [("Assessment, Performed: Symptoms score [KOOS]" using "Symptoms score [KOOS] (LOINC Code 72101-9)")] KOOSSymptoms,
  [("Assessment, Performed: Pain score [KOOS]" using "Pain score [KOOS] (LOINC Code 72102-7)")] KOOSPain
  let KOOSLifeQualityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSLifeQuality.relevantDatetime, KOOSLifeQuality.relevantPeriod ),
  KOOSSportTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSSport.relevantDatetime, KOOSSport.relevantPeriod ),
  KOOSActivityScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSActivityScore.relevantDatetime, KOOSActivityScore.relevantPeriod ),
  KOOSSymptomsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSSymptoms.relevantDatetime, KOOSSymptoms.relevantPeriod ),
  KOOSPainTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KOOSPain.relevantDatetime, KOOSPain.relevantPeriod )
  where KOOSLifeQualityTime same day as KOOSSportTime
    and KOOSSport.result is not null
    and KOOSLifeQualityTime same day as KOOSActivityScoreTime
    and KOOSActivityScore.result is not null
    and KOOSLifeQualityTime same day as KOOSSymptomsTime
    and KOOSSymptoms.result is not null
    and KOOSLifeQualityTime same day as KOOSPainTime
    and KOOSPain.result is not null
    and KOOSLifeQuality.result is not null
  return Max({ KOOSLifeQualityTime, KOOSSportTime, KOOSActivityScoreTime, KOOSSymptomsTime, KOOSPainTime }) FollowUpKOOSAssessmentTime
      such that FollowUpKOOSAssessmentTime during day of Interval[
      end of TotalKnee + 270 days, 
      end of TotalKnee + 365 days]
)
  or exists ( ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    return if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) ) TotalKnee
    with ( [("Assessment, Performed: Knee injury and osteoarthritis outcome score for joint replacement [KOOSJR]" using "Knee injury and osteoarthritis outcome score for joint replacement [KOOSJR] (LOINC Code 82324-5)")] KOOSJr
  where KOOSJr.result is not null ) DocumentedKOOSJr
  return start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DocumentedKOOSJr.relevantDatetime, DocumentedKOOSJr.relevantPeriod ) InitialKOOSJrAssessment
      such that TotalKnee starts 90 days or less on or after InitialKOOSJrAssessment
    with ( [("Assessment, Performed: Knee injury and osteoarthritis outcome score for joint replacement [KOOSJR]" using "Knee injury and osteoarthritis outcome score for joint replacement [KOOSJR] (LOINC Code 82324-5)")] KOOSJr
  where KOOSJr.result is not null ) DocumentedKOOSJr
  return start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DocumentedKOOSJr.relevantDatetime, DocumentedKOOSJr.relevantPeriod ) FollowUpKOOSJrAssessment
      such that FollowUpKOOSJrAssessment during day of Interval[
      end of TotalKnee + 270 days, 
      end of TotalKnee + 365 days]
)
  or exists ( ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    return if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) ) TotalKnee
    with from
  [("Assessment, Performed: PROMIS-10 Global Mental Health (GMH) score T-score" using "PROMIS-10 Global Mental Health (GMH) score T-score (LOINC Code 71969-0)")] PROMIS10MentalScore,
  [("Assessment, Performed: PROMIS-10 Global Physical Health (GPH) score T-score" using "PROMIS-10 Global Physical Health (GPH) score T-score (LOINC Code 71971-6)")] PROMIS10PhysicalScore
  let PROMIS10MentalScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10MentalScore.relevantDatetime, PROMIS10MentalScore.relevantPeriod ),
  PROMIS10PhysicalScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10PhysicalScore.relevantDatetime, PROMIS10PhysicalScore.relevantPeriod )
  where PROMIS10MentalScoreTime same day as PROMIS10PhysicalScoreTime
    and PROMIS10PhysicalScore.result is not null
    and PROMIS10MentalScore.result is not null
  return Max({ PROMIS10MentalScoreTime, PROMIS10PhysicalScoreTime }) InitialPROMIS10AssessmentTime
      such that TotalKnee starts 90 days or less on or after InitialPROMIS10AssessmentTime
    with from
  [("Assessment, Performed: PROMIS-10 Global Mental Health (GMH) score T-score" using "PROMIS-10 Global Mental Health (GMH) score T-score (LOINC Code 71969-0)")] PROMIS10MentalScore,
  [("Assessment, Performed: PROMIS-10 Global Physical Health (GPH) score T-score" using "PROMIS-10 Global Physical Health (GPH) score T-score (LOINC Code 71971-6)")] PROMIS10PhysicalScore
  let PROMIS10MentalScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10MentalScore.relevantDatetime, PROMIS10MentalScore.relevantPeriod ),
  PROMIS10PhysicalScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10PhysicalScore.relevantDatetime, PROMIS10PhysicalScore.relevantPeriod )
  where PROMIS10MentalScoreTime same day as PROMIS10PhysicalScoreTime
    and PROMIS10PhysicalScore.result is not null
    and PROMIS10MentalScore.result is not null
  return Max({ PROMIS10MentalScoreTime, PROMIS10PhysicalScoreTime }) FollowUpPROMIS10AssessmentTime
      such that FollowUpPROMIS10AssessmentTime during day of Interval[
      end of TotalKnee + 270 days, 
      end of TotalKnee + 365 days]
)
  or exists ( ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    return if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) ) TotalKnee
    with from
  [("Assessment, Performed: VR-12 Mental component summary (MCS) score - oblique method T-score" using "VR-12 Mental component summary (MCS) score - oblique method T-score (LOINC Code 72026-8)")] VR12MentalAssessment,
  [("Assessment, Performed: VR-12 Physical component summary (PCS) score - oblique method T-score" using "VR-12 Physical component summary (PCS) score - oblique method T-score (LOINC Code 72025-0)")] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) InitialKneeAssessmentObliqueTime
      such that TotalKnee starts 90 days or less on or after InitialKneeAssessmentObliqueTime
    with from
  [("Assessment, Performed: VR-12 Mental component summary (MCS) score - oblique method T-score" using "VR-12 Mental component summary (MCS) score - oblique method T-score (LOINC Code 72026-8)")] VR12MentalAssessment,
  [("Assessment, Performed: VR-12 Physical component summary (PCS) score - oblique method T-score" using "VR-12 Physical component summary (PCS) score - oblique method T-score (LOINC Code 72025-0)")] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) FollowUpObliqueAssessmentTime
      such that FollowUpObliqueAssessmentTime during day of Interval[
      end of TotalKnee + 270 days, 
      end of TotalKnee + 365 days]
)
  or exists ( ( [("Procedure, Performed: Primary TKA Procedure" using "Primary TKA Procedure (2.16.840.1.113883.3.464.1003.198.12.1007)")] TKAProcedure
  where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) starts 12 months or less before start of Measurement Period TKAProcedure
    return if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TKAProcedure.relevantDatetime, TKAProcedure.relevantPeriod ) ) TotalKnee
    with from
  [("Assessment, Performed: VR-12 Mental component summary (MCS) score - orthogonal method T-score" using "VR-12 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72028-4)")] VR12MentalAssessment,
  [("Assessment, Performed: VR-12 Physical component summary (PCS) score - orthogonal method T-score" using "VR-12 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72027-6)")] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) InitialOrthogonalAssessmentTime
      such that TotalKnee starts 90 days or less on or after InitialOrthogonalAssessmentTime
    with from
  [("Assessment, Performed: VR-12 Mental component summary (MCS) score - orthogonal method T-score" using "VR-12 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72028-4)")] VR12MentalAssessment,
  [("Assessment, Performed: VR-12 Physical component summary (PCS) score - orthogonal method T-score" using "VR-12 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72027-6)")] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) FollowUpOrthogonalAssessmentTime
      such that FollowUpOrthogonalAssessmentTime during day of Interval[
      end of TotalKnee + 270 days, 
      end of TotalKnee + 365 days]
)
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Denominator Exceptions:
None
=============================================================================================================================================================================
Stratification:
None
