=============================================================================================================================================================================
Initial Population:

	exists ( [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
			where Global.CalendarAgeInYearsAt(BirthDate.birthDatetime, start of Measurement Period)>= 18
	)
		and exists ( 
	( [("Encounter, Performed: Face to Face Interaction - No ED" using "Face to Face Interaction - No ED (2.16.840.1.113762.1.4.1080.2)")]
		union [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
		union [("Encounter, Performed: Preventive Care Services - Established Office Visit, 18 and Up" using "Preventive Care Services - Established Office Visit, 18 and Up (2.16.840.1.113883.3.464.1003.101.12.1025)")]
		union [("Encounter, Performed: Preventive Care Services-Initial Office Visit, 18 and Up" using "Preventive Care Services-Initial Office Visit, 18 and Up (2.16.840.1.113883.3.464.1003.101.12.1023)")]
		union [("Encounter, Performed: Outpatient Consultation" using "Outpatient Consultation (2.16.840.1.113883.3.464.1003.101.12.1008)")]
		union [("Encounter, Performed: Preventive Care Services - Other" using "Preventive Care Services - Other (2.16.840.1.113883.3.464.1003.101.12.1030)")] ) QualifyingEncounter
		where QualifyingEncounter.relevantPeriod during Measurement Period )
		and exists ( 


	if Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)< 1
	                                                                  */ then { 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP] } 
		else 
	/*First interval from start of overall period to first gap
	                                                                       */ { Interval[start of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP], start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[0]) }
		union 
	/*Rest of intervals. For each: start at end of current gap, end at end of next gap or end of overall period
	*/ 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7 Gap
			let NextGapIndex: IndexOf(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7, Gap)+ 1
			return if NextGapIndex < Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)then Interval ( 
			end of Gap, start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[NextGapIndex]) 
				else Interval ( 
			end of Gap, 
			end of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP]] Period
		let Meds: ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} Opioid
				where Opioid.periodInMP during Period
		)
		return {
			period: Period,
			meds: Meds Med
				return Med.med,
			cmd: 
	Sum((collapse(Periods))Period
			return all duration in days of Period
	)(Meds Med
					return Med.periodInMP
			)
		} Period
		where Period.cmd >= 90 )
=============================================================================================================================================================================
Denominator:


	exists ( [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
			where Global.CalendarAgeInYearsAt(BirthDate.birthDatetime, start of Measurement Period)>= 18
	)
		and exists ( 
	( [("Encounter, Performed: Face to Face Interaction - No ED" using "Face to Face Interaction - No ED (2.16.840.1.113762.1.4.1080.2)")]
		union [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
		union [("Encounter, Performed: Preventive Care Services - Established Office Visit, 18 and Up" using "Preventive Care Services - Established Office Visit, 18 and Up (2.16.840.1.113883.3.464.1003.101.12.1025)")]
		union [("Encounter, Performed: Preventive Care Services-Initial Office Visit, 18 and Up" using "Preventive Care Services-Initial Office Visit, 18 and Up (2.16.840.1.113883.3.464.1003.101.12.1023)")]
		union [("Encounter, Performed: Outpatient Consultation" using "Outpatient Consultation (2.16.840.1.113883.3.464.1003.101.12.1008)")]
		union [("Encounter, Performed: Preventive Care Services - Other" using "Preventive Care Services - Other (2.16.840.1.113883.3.464.1003.101.12.1030)")] ) QualifyingEncounter
		where QualifyingEncounter.relevantPeriod during Measurement Period )
		and exists ( 


	if Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)< 1
	                                                                  */ then { 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP] } 
		else 
	/*First interval from start of overall period to first gap
	                                                                       */ { Interval[start of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP], start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[0]) }
		union 
	/*Rest of intervals. For each: start at end of current gap, end at end of next gap or end of overall period
	*/ 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7 Gap
			let NextGapIndex: IndexOf(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7, Gap)+ 1
			return if NextGapIndex < Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)then Interval ( 
			end of Gap, start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[NextGapIndex]) 
				else Interval ( 
			end of Gap, 
			end of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP]] Period
		let Meds: ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} Opioid
				where Opioid.periodInMP during Period
		)
		return {
			period: Period,
			meds: Meds Med
				return Med.med,
			cmd: 
	Sum((collapse(Periods))Period
			return all duration in days of Period
	)(Meds Med
					return Med.periodInMP
			)
		} Period
		where Period.cmd >= 90 )
=============================================================================================================================================================================
Denominator Exclusions:

	exists ( ( [("Intervention, Order: Palliative Care" using "Palliative Care (2.16.840.1.113762.1.4.1111.162)")]
			union [("Intervention, Order: Hospice Care" using "Hospice Care (2.16.840.1.113883.3.3157.1004.20)")]
			union [("Intervention, Recommended: Hospice Care" using "Hospice Care (2.16.840.1.113883.3.3157.1004.20)")] ) CareOrder
			where CareOrder.authorDatetime during Measurement Period
	)
		or exists ( ( [("Intervention, Performed: Palliative Care" using "Palliative Care (2.16.840.1.113762.1.4.1111.162)")]
				union [("Intervention, Performed: Hospice Care" using "Hospice Care (2.16.840.1.113883.3.3157.1004.20)")] ) CarePerformRecommend
				where CarePerformRecommend.relevantPeriod overlaps Measurement Period
		)
		or exists ( [("Diagnosis: All Primary and Secondary Cancer" using "All Primary and Secondary Cancer (2.16.840.1.113762.1.4.1111.161)")] Cancer
				where Cancer.prevalencePeriod starts 1 year or less before start of Measurement Period
					or Cancer.prevalencePeriod starts during Measurement Period
		)
		or exists ( [("Diagnosis: Sickle Cell Disease and Related Blood Disorders" using "Sickle Cell Disease and Related Blood Disorders (2.16.840.1.113762.1.4.1029.35)")] SickleCell
				where SickleCell.prevalencePeriod overlaps Measurement Period
					or SickleCell.authorDatetime during Measurement Period
		)
=============================================================================================================================================================================
Numerator:

	exists 




	if Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)< 1
	                                                                  */ then { 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP] } 
		else 
	/*First interval from start of overall period to first gap
	                                                                       */ { Interval[start of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP], start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[0]) }
		union 
	/*Rest of intervals. For each: start at end of current gap, end at end of next gap or end of overall period
	*/ 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7 Gap
			let NextGapIndex: IndexOf(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7, Gap)+ 1
			return if NextGapIndex < Length(


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7)then Interval ( 
			end of Gap, start of 


	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	) CompleteOpioidPeriod
		let NextIndex: IndexOf(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	), CompleteOpioidPeriod)+ 1
		where NextIndex < Length(
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	))
		return Interval ( 
		end of CompleteOpioidPeriod, start of 
	collapse ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			return OpioidPeriod.periodInMP
	)[NextIndex]) GapsinActiveOpioidPeriod
		where duration in days of GapsinActiveOpioidPeriod > 7[NextGapIndex]) 
				else Interval ( 
			end of Gap, 
			end of 
	Interval[start of First(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by start of periodInMP
	).periodInMP, 
	end of Last(

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} OpioidPeriod
			sort by 
			end of periodInMP
	).periodInMP]] Period
		let Meds: ( 

	[("Medication, Order: Opioid Medications" using "Opioid Medications (2.16.840.1.113883.3.3157.1004.26)")] OpioidMedicationOrder
		where Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](OpioidMedicationOrder)overlaps Measurement Period Opioid
		return {
			periodInMP: Interval[start of OpioidMed.relevantPeriod, if 
	end of OpioidMed.relevantPeriod = maximum DateTime
		and OpioidMed.daysSupplied is not null then start of OpioidMed.relevantPeriod + Quantity { value: OpioidMed.daysSupplied, unit: 'd' } 
		else 
	end of OpioidMed.relevantPeriod](Opioid)
				intersect Measurement Period,
			med: Opioid
		} Opioid
				where Opioid.periodInMP during Period
		)
		return {
			period: Period,
			meds: Meds Med
				return Med.med,
			cmd: 
	Sum((collapse(Periods))Period
			return all duration in days of Period
	)(Meds Med
					return Med.periodInMP
			)
		} Period
		where Period.cmd >= 90 Period
		let ScriptsMMEDays: 
	medications OpioidMed
		let dosesPerDay: 
	case
		when frequency ~ (code "Once daily (qualifier value)" ("SNOMEDCT Code (229797004)")) then 1.0
		when frequency ~ (code "Twice a day (qualifier value)" ("SNOMEDCT Code (229799001)")) then 2.0
		when frequency ~ (code "Three times daily (qualifier value)" ("SNOMEDCT Code (229798009)")) then 3.0
		when frequency ~ (code "Four times daily (qualifier value)" ("SNOMEDCT Code (307439001)")) then 4.0
		when frequency ~ (code "Every twenty four hours (qualifier value)" ("SNOMEDCT Code (396125000)")) then 1.0
		when frequency ~ (code "Every twelve hours (qualifier value)" ("SNOMEDCT Code (307470009)")) then 2.0
		when frequency ~ (code "Every thirty six hours (qualifier value)" ("SNOMEDCT Code (396126004)")) then 0.67
		when frequency ~ (code "Every eight hours (qualifier value)" ("SNOMEDCT Code (307469008)")) then 3.0
		when frequency ~ (code "Every four hours (qualifier value)" ("SNOMEDCT Code (225756002)")) then 6.0
		when frequency ~ (code "Every six hours (qualifier value)" ("SNOMEDCT Code (307468000)")) then 4.0
		when frequency ~ (code "Every seventy two hours (qualifier value)" ("SNOMEDCT Code (396143001)")) then 0.34
		when frequency ~ (code "Every forty eight hours (qualifier value)" ("SNOMEDCT Code (396131002)")) then 0.5
		when frequency ~ (code "Every eight to twelve hours (qualifier value)" ("SNOMEDCT Code (396140003)")) then 2.0
		when frequency ~ (code "Every six to eight hours (qualifier value)" ("SNOMEDCT Code (396139000)")) then 3.0
		when frequency ~ (code "Every three to four hours (qualifier value)" ("SNOMEDCT Code (225754004)")) then 6.0
		when frequency ~ (code "Every three to six hours (qualifier value)" ("SNOMEDCT Code (396127008)")) then 4.0
		when frequency ~ (code "Every two to four hours (qualifier value)" ("SNOMEDCT Code (225752000)")) then 6.0
		when frequency ~ (code "One to four times a day (qualifier value)" ("SNOMEDCT Code (396109005)")) then 4.0
		when frequency ~ (code "One to three times a day (qualifier value)" ("SNOMEDCT Code (396108002)")) then 3.0
		when frequency ~ (code "One to two times a day (qualifier value)" ("SNOMEDCT Code (396107007)")) then 2.0
		when frequency ~ (code "Two to four times a day (qualifier value)" ("SNOMEDCT Code (396111001)")) then 4.0 
		else null 
	end(OpioidMed.frequency),
		MME: singleton from ( OpioidConversionLogic.CalculateMorphineMilligramEquivalents({ {
					rxNormCode: OpioidMed.code,
					doseQuantity: OpioidMed.dosage,
					dosesPerDay: dosesPerDay
				} }
			)
		),
		medPeriod: OpioidMed.relevantPeriod
			intersect period
		return {
			rxNormCode: OpioidMed.code,
			authortime: OpioidMed.authorDatetime,
			effectivePeriod: medPeriod,
			conversionFactor: MME.conversionFactor,
			daysInPeriod: Timing.DaysInPeriod(medPeriod),
			mme: MME.MME
		}(Period.meds, Period.period)
		return {
			period: Period.period,
			meds: Period.meds,
			cmd: Period.cmd,
			mmeDays: ScriptsMMEDays,
			mmeSumDays: 
	( distinct(flatten(scriptsMMEDays MMEDays
				return all MMEDays.daysInPeriod
		)
	)) Day
		let totalMME: Sum(scriptsMMEDays ScriptMMEDays
				where Day in ScriptMMEDays.daysInPeriod
				return all ScriptMMEDays.mme
		)
		return {
			Day: Day,
			totalMME: totalMME
		}(ScriptsMMEDays)
		} Period
		where Count(Period.mmeSumDays MMESum
				where MMESum.totalMME.value >= 90
		)>= 90
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Denominator Exceptions:
None
=============================================================================================================================================================================
Stratification:
None
