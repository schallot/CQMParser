=============================================================================================================================================================================
Initial Population:
AgeInYearsAt(date from 
  end of Measurement Period
)= 2
  and exists ( ( [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
  union [("Encounter, Performed: Home Healthcare Services" using "Home Healthcare Services (2.16.840.1.113883.3.464.1003.101.12.1016)")]
  union [("Encounter, Performed: Preventive Care, Established Office Visit, 0 to 17" using "Preventive Care, Established Office Visit, 0 to 17 (2.16.840.1.113883.3.464.1003.101.12.1024)")]
  union [("Encounter, Performed: Preventive Care Services, Initial Office Visit, 0 to 17" using "Preventive Care Services, Initial Office Visit, 0 to 17 (2.16.840.1.113883.3.464.1003.101.12.1022)")]
  union [("Encounter, Performed: Office or other outpatient visit for the evaluation and management of an established patient, that may not require the presence of a physician or other qualified health care professional. Usually, the presenting problem(s) are minimal." using "Office or other outpatient visit for the evaluation and management of an established patient, that may not require the presence of a physician or other qualified health care professional. Usually, the presenting problem(s) are minimal. (CPT Code 99211)")]
  union [("Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)")]
  union [("Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)")] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period )
=============================================================================================================================================================================
Denominator:
AgeInYearsAt(date from 
  end of Measurement Period
)= 2
  and exists ( ( [("Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)")]
  union [("Encounter, Performed: Home Healthcare Services" using "Home Healthcare Services (2.16.840.1.113883.3.464.1003.101.12.1016)")]
  union [("Encounter, Performed: Preventive Care, Established Office Visit, 0 to 17" using "Preventive Care, Established Office Visit, 0 to 17 (2.16.840.1.113883.3.464.1003.101.12.1024)")]
  union [("Encounter, Performed: Preventive Care Services, Initial Office Visit, 0 to 17" using "Preventive Care Services, Initial Office Visit, 0 to 17 (2.16.840.1.113883.3.464.1003.101.12.1022)")]
  union [("Encounter, Performed: Office or other outpatient visit for the evaluation and management of an established patient, that may not require the presence of a physician or other qualified health care professional. Usually, the presenting problem(s) are minimal." using "Office or other outpatient visit for the evaluation and management of an established patient, that may not require the presence of a physician or other qualified health care professional. Usually, the presenting problem(s) are minimal. (CPT Code 99211)")]
  union [("Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)")]
  union [("Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)")] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period )
=============================================================================================================================================================================
Denominator Exclusions:
Hospice.exists ( [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
    where ( InpatientEncounter.dischargeDisposition ~ (code "Discharge to home for hospice care (procedure)" ("SNOMEDCT Code (428361000124107)"))
        or InpatientEncounter.dischargeDisposition ~ (code "Discharge to healthcare facility for hospice care (procedure)" ("SNOMEDCT Code (428371000124100)"))
    )
      and InpatientEncounter.relevantPeriod ends during day of Measurement Period
)
  or exists ( [("Encounter, Performed: Hospice Encounter" using "Hospice Encounter (2.16.840.1.113883.3.464.1003.1003)")] HospiceEncounter
      where HospiceEncounter.relevantPeriod overlaps Measurement Period
  )
  or exists ( [("Assessment, Performed: Hospice care [Minimum Data Set]" using "Hospice care [Minimum Data Set] (LOINC Code 45755-6)")] HospiceAssessment
      where HospiceAssessment.result ~ (code "Yes (qualifier value)" ("SNOMEDCT Code (373066001)"))
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospiceAssessment.relevantDatetime, HospiceAssessment.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( [("Intervention, Order: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)")] HospiceOrder
      where HospiceOrder.authorDatetime during day of Measurement Period
  )
  or exists ( [("Intervention, Performed: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)")] HospicePerformed
      where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospicePerformed.relevantDatetime, HospicePerformed.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( [("Diagnosis: Severe Combined Immunodeficiency" using "Severe Combined Immunodeficiency (2.16.840.1.113883.3.464.1003.120.12.1007)")] SevereImmuneDisorder
    where date from start of SevereImmuneDisorder.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
)
  or exists ( [("Diagnosis: Disorders of the Immune System" using "Disorders of the Immune System (2.16.840.1.113883.3.464.1003.120.12.1001)")] ImmuneDisorder
    where date from start of ImmuneDisorder.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
)
  or exists ( [("Diagnosis: HIV" using "HIV (2.16.840.1.113883.3.464.1003.120.12.1003)")] HIV
    where date from start of HIV.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
)
  or exists ( [("Diagnosis: Malignant Neoplasm of Lymphatic and Hematopoietic Tissue" using "Malignant Neoplasm of Lymphatic and Hematopoietic Tissue (2.16.840.1.113883.3.464.1003.108.12.1009)")] LymphaticMalignantNeoplasm
    where date from start of LymphaticMalignantNeoplasm.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
)
  or exists ( [("Diagnosis: Intussusception" using "Intussusception (2.16.840.1.113883.3.464.1003.199.12.1056)")] IntussusceptionDisorder
    where date from start of IntussusceptionDisorder.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
)
=============================================================================================================================================================================
Numerator:
( exists ( from
  ( ( [("Immunization, Administered: DTaP Vaccine" using "DTaP Vaccine (2.16.840.1.113883.3.464.1003.196.12.1214)")]
    union [("Procedure, Performed: DTaP Vaccine Administered" using "DTaP Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1022)")] ) DTaPVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DTaPVaccination.relevantDatetime, DTaPVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) DTaPVaccination1,
  ( ( [("Immunization, Administered: DTaP Vaccine" using "DTaP Vaccine (2.16.840.1.113883.3.464.1003.196.12.1214)")]
    union [("Procedure, Performed: DTaP Vaccine Administered" using "DTaP Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1022)")] ) DTaPVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DTaPVaccination.relevantDatetime, DTaPVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) DTaPVaccination2,
  ( ( [("Immunization, Administered: DTaP Vaccine" using "DTaP Vaccine (2.16.840.1.113883.3.464.1003.196.12.1214)")]
    union [("Procedure, Performed: DTaP Vaccine Administered" using "DTaP Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1022)")] ) DTaPVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DTaPVaccination.relevantDatetime, DTaPVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) DTaPVaccination3,
  ( ( [("Immunization, Administered: DTaP Vaccine" using "DTaP Vaccine (2.16.840.1.113883.3.464.1003.196.12.1214)")]
    union [("Procedure, Performed: DTaP Vaccine Administered" using "DTaP Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1022)")] ) DTaPVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( DTaPVaccination.relevantDatetime, DTaPVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) DTaPVaccination4
  where DTaPVaccination2.relevantDatetime 1 day or more after day of DTaPVaccination1.relevantDatetime
    and DTaPVaccination3.relevantDatetime 1 day or more after day of DTaPVaccination2.relevantDatetime
    and DTaPVaccination4.relevantDatetime 1 day or more after day of DTaPVaccination3.relevantDatetime
  return DTaPVaccination1 )
    or exists ( ( [("Diagnosis: Anaphylactic Reaction to DTaP Vaccine" using "Anaphylactic Reaction to DTaP Vaccine (2.16.840.1.113883.3.464.1003.199.12.1031)")]
  union [("Diagnosis: Encephalitis Due to Diphtheria, Tetanus or Pertussis Vaccine" using "Encephalitis Due to Diphtheria, Tetanus or Pertussis Vaccine (2.16.840.1.113883.3.464.1003.1164)")] ) DTaPConditions
  where date from start of DTaPConditions.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
)
  and ( exists ( from
  ( ( [("Immunization, Administered: Inactivated Polio Vaccine (IPV)" using "Inactivated Polio Vaccine (IPV) (2.16.840.1.113883.3.464.1003.196.12.1219)")]
    union [("Procedure, Performed: Inactivated Polio Vaccine (IPV) Administered" using "Inactivated Polio Vaccine (IPV) Administered (2.16.840.1.113883.3.464.1003.110.12.1045)")] ) PolioVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PolioVaccination.relevantDatetime, PolioVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PolioVaccination1,
  ( ( [("Immunization, Administered: Inactivated Polio Vaccine (IPV)" using "Inactivated Polio Vaccine (IPV) (2.16.840.1.113883.3.464.1003.196.12.1219)")]
    union [("Procedure, Performed: Inactivated Polio Vaccine (IPV) Administered" using "Inactivated Polio Vaccine (IPV) Administered (2.16.840.1.113883.3.464.1003.110.12.1045)")] ) PolioVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PolioVaccination.relevantDatetime, PolioVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PolioVaccination2,
  ( ( [("Immunization, Administered: Inactivated Polio Vaccine (IPV)" using "Inactivated Polio Vaccine (IPV) (2.16.840.1.113883.3.464.1003.196.12.1219)")]
    union [("Procedure, Performed: Inactivated Polio Vaccine (IPV) Administered" using "Inactivated Polio Vaccine (IPV) Administered (2.16.840.1.113883.3.464.1003.110.12.1045)")] ) PolioVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PolioVaccination.relevantDatetime, PolioVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PolioVaccination3
  where PolioVaccination2.relevantDatetime 1 day or more after day of PolioVaccination1.relevantDatetime
    and PolioVaccination3.relevantDatetime 1 day or more after day of PolioVaccination2.relevantDatetime
  return PolioVaccination1 ) )
  and ( exists ( ( ( [("Immunization, Administered: Measles, Mumps and Rubella (MMR) Vaccine" using "Measles, Mumps and Rubella (MMR) Vaccine (2.16.840.1.113883.3.464.1003.196.12.1224)")]
    union [("Procedure, Performed: Measles, Mumps and Rubella (MMR) Vaccine Administered" using "Measles, Mumps and Rubella (MMR) Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1031)")] ) MMRVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( MMRVaccination.relevantDatetime, MMRVaccination.relevantPeriod ) ) during Interval[date from Patient.birthDatetime + 1 year, date from Patient.birthDatetime + 2 years]
) )
      or ( exists ( [("Diagnosis: Measles" using "Measles (2.16.840.1.113883.3.464.1003.110.12.1053)")] MeaslesDiagnosis
  where date from start of MeaslesDiagnosis.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
          and exists ( [("Diagnosis: Mumps" using "Mumps (2.16.840.1.113883.3.464.1003.110.12.1032)")] MumpsDiagnosis
  where date from start of MumpsDiagnosis.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
          and exists ( [("Diagnosis: Rubella" using "Rubella (2.16.840.1.113883.3.464.1003.110.12.1037)")] RubellaDiagnosis
  where date from start of RubellaDiagnosis.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
      )
  )
  and ( exists ( ( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses1
  without ( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses2
    such that AllHibDoses1.relevantDatetime less than 1 day before AllHibDoses2.relevantDatetime HibImmunization //union of 3 and 4 dose immunizations
//4 dose test
    let HasFourDose: Count(( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
))> 0
    where ( HasFourDose //if pt had at least one 4 dose code
        and Count(distinct(( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses1
  without ( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses2
    such that AllHibDoses1.relevantDatetime less than 1 day before AllHibDoses2.relevantDatetime HibVaccinations
              return HibVaccinations.relevantDatetime
          )
        )>= 4 //pt must have 4 regimens (e.g., 3,3,4,4 or 4,3,4,4)
    )
      or ( HasFourDose is false //if pt did not have at least one 4 dose code
          and Count(distinct(( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses1
  without ( ( [("Immunization, Administered: Hib Vaccine (3 dose schedule)" using "Hib Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1083)")]
    union [("Procedure, Performed: Hib Vaccine (3 dose schedule) Administered" using "Hib Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1084)")] ) ThreeDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseHib.relevantDatetime, ThreeDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Hib Vaccine (4 dose schedule)" using "Hib Vaccine (4 dose schedule) (2.16.840.1.113883.3.464.1003.110.12.1085)")]
    union [("Procedure, Performed: Hib Vaccine (4 dose schedule) Administered" using "Hib Vaccine (4 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1086)")] ) FourDoseHib
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FourDoseHib.relevantDatetime, FourDoseHib.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllHibDoses2
    such that AllHibDoses1.relevantDatetime less than 1 day before AllHibDoses2.relevantDatetime HibVaccinations
                return HibVaccinations.relevantDatetime
            )
          )>= 3 //pt must have 3 regimens of 3 dose codes
      )
)
      or exists ( [("Diagnosis: Anaphylaxis due to Haemophilus influenzae type b vaccine (disorder)" using "Anaphylaxis due to Haemophilus influenzae type b vaccine (disorder) (SNOMEDCT Code 433621000124101)")] HibReaction
  where date from start of HibReaction.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
  )
  and ( exists ( from
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination1,
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination2,
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination3
  where HepatitisBVaccination2.relevantDatetime 1 day or more after day of HepatitisBVaccination1.relevantDatetime
    and HepatitisBVaccination3.relevantDatetime 1 day or more after day of HepatitisBVaccination2.relevantDatetime
  return HepatitisBVaccination1 )
      or ( exists ( from
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination1,
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination2,
  ( ( [("Immunization, Administered: Hepatitis B Vaccine" using "Hepatitis B Vaccine (2.16.840.1.113883.3.464.1003.196.12.1216)")]
    union [("Procedure, Performed: Hepatitis B Vaccine Administered" using "Hepatitis B Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1042)")] ) HepatitisBVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisBVaccination.relevantDatetime, HepatitisBVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) HepatitisBVaccination3
  where HepatitisBVaccination2.relevantDatetime 1 day or more after day of HepatitisBVaccination1.relevantDatetime
    and HepatitisBVaccination3.relevantDatetime 1 day or more after day of HepatitisBVaccination2.relevantDatetime
  return HepatitisBVaccination1 HepatitisBRequirement
  where date from HepatitisBRequirement.relevantDatetime during day of Interval[Patient.birthDatetime, Patient.birthDatetime + 7 days] )
          or exists ( ( [("Diagnosis: Anaphylaxis due to Hepatitis B vaccine (disorder)" using "Anaphylaxis due to Hepatitis B vaccine (disorder) (SNOMEDCT Code 428321000124101)")]
  union [("Diagnosis: Hepatitis B" using "Hepatitis B (2.16.840.1.113883.3.464.1003.110.12.1025)")] ) HepBConditions
  where date from start of HepBConditions.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
      )
  )
  and ( exists ( ( ( [("Immunization, Administered: Varicella Zoster Vaccine (VZV)" using "Varicella Zoster Vaccine (VZV) (2.16.840.1.113883.3.464.1003.196.12.1170)")]
    union [("Procedure, Performed: Varicella Zoster Vaccine (VZV) Administered" using "Varicella Zoster Vaccine (VZV) Administered (2.16.840.1.113883.3.464.1003.110.12.1040)")] ) ChickenPoxVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ChickenPoxVaccination.relevantDatetime, ChickenPoxVaccination.relevantPeriod ) ) during Interval[date from Patient.birthDatetime + 1 year, date from Patient.birthDatetime + 2 years]
) )
      or exists ( [("Diagnosis: Varicella Zoster" using "Varicella Zoster (2.16.840.1.113883.3.464.1003.110.12.1039)")] VaricellaZoster
  where date from start of VaricellaZoster.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
  )
  and ( exists ( from
  ( ( [("Immunization, Administered: Pneumococcal Conjugate Vaccine" using "Pneumococcal Conjugate Vaccine (2.16.840.1.113883.3.464.1003.196.12.1221)")]
    union [("Procedure, Performed: Pneumococcal Conjugate Vaccine Administered" using "Pneumococcal Conjugate Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1046)")] ) PneumococcalVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PneumococcalVaccination.relevantDatetime, PneumococcalVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PneumococcalVaccination1,
  ( ( [("Immunization, Administered: Pneumococcal Conjugate Vaccine" using "Pneumococcal Conjugate Vaccine (2.16.840.1.113883.3.464.1003.196.12.1221)")]
    union [("Procedure, Performed: Pneumococcal Conjugate Vaccine Administered" using "Pneumococcal Conjugate Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1046)")] ) PneumococcalVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PneumococcalVaccination.relevantDatetime, PneumococcalVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PneumococcalVaccination2,
  ( ( [("Immunization, Administered: Pneumococcal Conjugate Vaccine" using "Pneumococcal Conjugate Vaccine (2.16.840.1.113883.3.464.1003.196.12.1221)")]
    union [("Procedure, Performed: Pneumococcal Conjugate Vaccine Administered" using "Pneumococcal Conjugate Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1046)")] ) PneumococcalVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PneumococcalVaccination.relevantDatetime, PneumococcalVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PneumococcalVaccination3,
  ( ( [("Immunization, Administered: Pneumococcal Conjugate Vaccine" using "Pneumococcal Conjugate Vaccine (2.16.840.1.113883.3.464.1003.196.12.1221)")]
    union [("Procedure, Performed: Pneumococcal Conjugate Vaccine Administered" using "Pneumococcal Conjugate Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1046)")] ) PneumococcalVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PneumococcalVaccination.relevantDatetime, PneumococcalVaccination.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) PneumococcalVaccination4
  where PneumococcalVaccination2.relevantDatetime 1 day or more after day of PneumococcalVaccination1.relevantDatetime
    and PneumococcalVaccination3.relevantDatetime 1 day or more after day of PneumococcalVaccination2.relevantDatetime
    and PneumococcalVaccination4.relevantDatetime 1 day or more after day of PneumococcalVaccination3.relevantDatetime
  return PneumococcalVaccination1 ) )
  and ( exists ( ( ( [("Immunization, Administered: Hepatitis A Vaccine" using "Hepatitis A Vaccine (2.16.840.1.113883.3.464.1003.196.12.1215)")]
    union [("Procedure, Performed: Hepatitis A Vaccine Administered" using "Hepatitis A Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1041)")] ) HepatitisAVaccination
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HepatitisAVaccination.relevantDatetime, HepatitisAVaccination.relevantPeriod ) ) during Interval[date from Patient.birthDatetime + 1 year, date from Patient.birthDatetime + 2 years]
) )
      or exists ( [("Diagnosis: Hepatitis A" using "Hepatitis A (2.16.840.1.113883.3.464.1003.110.12.1024)")] HepatitisADiagnosis
  where date from start of HepatitisADiagnosis.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years] )
  )
  and ( exists ( ( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses1
  without ( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses2
    such that AllRotavirusDoses1.relevantDatetime less than 1 day before AllRotavirusDoses2.relevantDatetime RotavirusImmunization
    let HasThreeDose: Count(( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
))> 0
    where ( HasThreeDose
        and Count(distinct(( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses1
  without ( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses2
    such that AllRotavirusDoses1.relevantDatetime less than 1 day before AllRotavirusDoses2.relevantDatetime RotavirusVaccinations
              return RotavirusVaccinations.relevantDatetime
          )
        )>= 3
    )
      or ( HasThreeDose is false
          and Count(distinct(( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses1
  without ( ( [("Immunization, Administered: rotavirus, live, monovalent vaccine" using "rotavirus, live, monovalent vaccine (CVX Code 119)")]
    union [("Procedure, Performed: Rotavirus Vaccine (2 dose schedule) Administered" using "Rotavirus Vaccine (2 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1048)")] ) TwoDoseRotavirus
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( TwoDoseRotavirus.relevantDatetime, TwoDoseRotavirus.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
)
  union ( ( [("Immunization, Administered: Rotavirus Vaccine (3 dose schedule)" using "Rotavirus Vaccine (3 dose schedule) (2.16.840.1.113883.3.464.1003.196.12.1223)")]
    union [("Procedure, Performed: Rotavirus Vaccine (3 dose schedule) Administered" using "Rotavirus Vaccine (3 dose schedule) Administered (2.16.840.1.113883.3.464.1003.110.12.1047)")] ) ThreeDoseRotavirus
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( ThreeDoseRotavirus.relevantDatetime, ThreeDoseRotavirus.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 42 days, date from Patient.birthDatetime + 2 years]
) AllRotavirusDoses2
    such that AllRotavirusDoses1.relevantDatetime less than 1 day before AllRotavirusDoses2.relevantDatetime RotavirusVaccinations
                return RotavirusVaccinations.relevantDatetime
            )
          )>= 2
      )
)
      or exists ( ( [("Diagnosis: Anaphylaxis due to rotavirus vaccine (disorder)" using "Anaphylaxis due to rotavirus vaccine (disorder) (SNOMEDCT Code 428331000124103)")] RotavirusConditions
    where date from start of RotavirusConditions.prevalencePeriod during day of Interval[date from Patient.birthDatetime, date from Patient.birthDatetime + 2 years]
) )
  )
  and ( exists ( from
  ( ( [("Immunization, Administered: Influenza Vaccine" using "Influenza Vaccine (2.16.840.1.113883.3.464.1003.196.12.1218)")]
    union [("Procedure, Performed: Influenza Vaccine Administered" using "Influenza Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1044)")] ) InfluenzaAdministration
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( InfluenzaAdministration.relevantDatetime, InfluenzaAdministration.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 180 days, date from Patient.birthDatetime + 2 years]
) FluVaccination1,
  ( ( [("Immunization, Administered: Influenza Vaccine" using "Influenza Vaccine (2.16.840.1.113883.3.464.1003.196.12.1218)")]
    union [("Procedure, Performed: Influenza Vaccine Administered" using "Influenza Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1044)")] ) InfluenzaAdministration
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( InfluenzaAdministration.relevantDatetime, InfluenzaAdministration.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 180 days, date from Patient.birthDatetime + 2 years]
) FluVaccination2
  where FluVaccination2.relevantDatetime 1 day or more after day of FluVaccination1.relevantDatetime
  return FluVaccination1 )
      or ( exists ( ( [("Immunization, Administered: Influenza Virus LAIV Immunization" using "Influenza Virus LAIV Immunization (2.16.840.1.113883.3.464.1003.110.12.1087)")]
    union [("Procedure, Performed: Influenza Virus LAIV Procedure" using "Influenza Virus LAIV Procedure (2.16.840.1.113883.3.464.1003.110.12.1088)")] ) InfluenzaAdministration
    where Interval[date from start of period, date from end of period] ( if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( InfluenzaAdministration.relevantDatetime, InfluenzaAdministration.relevantPeriod ) ) during day of Interval[date from Patient.birthDatetime + 2 years, date from Patient.birthDatetime + 2 years]
)
  and exists ( ( [("Immunization, Administered: Influenza Vaccine" using "Influenza Vaccine (2.16.840.1.113883.3.464.1003.196.12.1218)")]
    union [("Procedure, Performed: Influenza Vaccine Administered" using "Influenza Vaccine Administered (2.16.840.1.113883.3.464.1003.110.12.1044)")] ) InfluenzaAdministration
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( InfluenzaAdministration.relevantDatetime, InfluenzaAdministration.relevantPeriod ) during day of Interval[date from Patient.birthDatetime + 180 days, date from Patient.birthDatetime + 2 years]
) )
  )
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Denominator Exceptions:
None
=============================================================================================================================================================================
Stratification:
None
