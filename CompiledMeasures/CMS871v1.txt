=============================================================================================================================================================================
Initial Population:
[("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Diagnosis: Diabetes" using "Diabetes (2.16.840.1.113883.3.464.1003.103.12.1001)")] DiabetesDiagnosis
	    such that DiabetesDiagnosis.prevalencePeriod starts before 
	    end of EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Medication, Administered: Hypoglycemics Treatment Medications" using "Hypoglycemics Treatment Medications (2.16.840.1.113762.1.4.1196.394)")] HypoglycemicMedication
	    such that Global.NormalizeInterval ( HypoglycemicMedication.relevantDatetime, HypoglycemicMedication.relevantPeriod ) starts during EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab
	    such that BloodGlucoseLab.relevantDatetime during EncounterWithHospitalization.hospitalizationPeriod
	      and BloodGlucoseLab.result >= 200 'mg/dL'
	  return EncounterWithHospitalization.encounter
=============================================================================================================================================================================
Denominator:
[("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Diagnosis: Diabetes" using "Diabetes (2.16.840.1.113883.3.464.1003.103.12.1001)")] DiabetesDiagnosis
	    such that DiabetesDiagnosis.prevalencePeriod starts before 
	    end of EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Medication, Administered: Hypoglycemics Treatment Medications" using "Hypoglycemics Treatment Medications (2.16.840.1.113762.1.4.1196.394)")] HypoglycemicMedication
	    such that Global.NormalizeInterval ( HypoglycemicMedication.relevantDatetime, HypoglycemicMedication.relevantPeriod ) starts during EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab
	    such that BloodGlucoseLab.relevantDatetime during EncounterWithHospitalization.hospitalizationPeriod
	      and BloodGlucoseLab.result >= 200 'mg/dL'
	  return EncounterWithHospitalization.encounter
=============================================================================================================================================================================
Denominator Exclusions:
None
=============================================================================================================================================================================
Numerator:
[("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Diagnosis: Diabetes" using "Diabetes (2.16.840.1.113883.3.464.1003.103.12.1001)")] DiabetesDiagnosis
	    such that DiabetesDiagnosis.prevalencePeriod starts before 
	    end of EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Medication, Administered: Hypoglycemics Treatment Medications" using "Hypoglycemics Treatment Medications (2.16.840.1.113762.1.4.1196.394)")] HypoglycemicMedication
	    such that Global.NormalizeInterval ( HypoglycemicMedication.relevantDatetime, HypoglycemicMedication.relevantPeriod ) starts during EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab
	    such that BloodGlucoseLab.relevantDatetime during EncounterWithHospitalization.hospitalizationPeriod
	      and BloodGlucoseLab.result >= 200 'mg/dL'
	  return EncounterWithHospitalization.encounter PertinentEncounter
	  let period: Global.HospitalizationWithObservation ( PertinentEncounter ),
	  relevantPeriod: Interval[start of Period, Min({ 
	  end of Period, start of Period + 10 days }
	)](period)
	  return Tuple {
	    encounter: PertinentEncounter,
	    hospitalizationPeriod: period,
	    relevantPeriod: relevantPeriod,
	    relevantDays: ( ( expand { Interval[1, days between start of Period and 
	end of Period]} ) DayExpand
	  return 
	  end of DayExpand(Period)) DayIndex
	  let startPeriod: start of Period + ( 24 hours * ( DayIndex - 1 ) ),
	  endPeriod: if ( hours between startPeriod and 
	    end of Period < 24
	  ) then startPeriod 
	    else start of Period + ( 24 hours * DayIndex )
	  return Tuple {
	    dayIndex: DayIndex,
	    dayPeriod: Interval[startPeriod, endPeriod )
	  }(relevantPeriod)
	  } PertinentEncounterDays
	  return Tuple {
	    encounter: PertinentEncounterDays.encounter,
	    relevantPeriod: PertinentEncounterDays.relevantPeriod,
	    relevantDays: ( PertinentEncounterDays.relevantDays EncounterDay
	        return Tuple {
	          dayIndex: EncounterDay.dayIndex,
	          dayPeriod: EncounterDay.dayPeriod,
	          hasSevereResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab1
	              where BloodGlucoseLab1.result > 300 'mg/dL'
	                and BloodGlucoseLab1.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasElevatedResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab2
	              where BloodGlucoseLab2.result >= 200 'mg/dL'
	                and BloodGlucoseLab2.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasNoResult: not exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab3
	              where BloodGlucoseLab3.relevantDatetime during EncounterDay.dayPeriod
	          )
	        }
	    )
	  } EncounterWithResultDays
	  let eligibleEventDays: EncounterWithResultDays.relevantDays EncounterDay
	    where EncounterDay.dayIndex > 1
	    return Tuple {
	      dayIndex: EncounterDay.dayIndex,
	      dayPeriod: EncounterDay.dayPeriod,
	      hasHyperglycemicEvent: ( EncounterDay.hasSevereResult
	          or ( EncounterDay.hasNoResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 2].hasElevatedResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 3].hasElevatedResult
	          )
	      )
	    }
	  return Tuple {
	    encounter: EncounterWithResultDays.encounter,
	    relevantPeriod: EncounterWithResultDays.relevantPeriod,
	    eligibleEventDays: eligibleEventDays
	  } EncounterWithEventDays
	  where exists ( EncounterWithEventDays.eligibleEventDays EligibleEventDay
	      where EligibleEventDay.hasHyperglycemicEvent
	  )
	  return EncounterWithEventDays.encounter
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Measure Observation 1    :
Sum (
	  singleton from ( [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Diagnosis: Diabetes" using "Diabetes (2.16.840.1.113883.3.464.1003.103.12.1001)")] DiabetesDiagnosis
	    such that DiabetesDiagnosis.prevalencePeriod starts before 
	    end of EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Medication, Administered: Hypoglycemics Treatment Medications" using "Hypoglycemics Treatment Medications (2.16.840.1.113762.1.4.1196.394)")] HypoglycemicMedication
	    such that Global.NormalizeInterval ( HypoglycemicMedication.relevantDatetime, HypoglycemicMedication.relevantPeriod ) starts during EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab
	    such that BloodGlucoseLab.relevantDatetime during EncounterWithHospitalization.hospitalizationPeriod
	      and BloodGlucoseLab.result >= 200 'mg/dL'
	  return EncounterWithHospitalization.encounter PertinentEncounter
	  let period: Global.HospitalizationWithObservation ( PertinentEncounter ),
	  relevantPeriod: Interval[start of Period, Min({ 
	  end of Period, start of Period + 10 days }
	)](period)
	  return Tuple {
	    encounter: PertinentEncounter,
	    hospitalizationPeriod: period,
	    relevantPeriod: relevantPeriod,
	    relevantDays: ( ( expand { Interval[1, days between start of Period and 
	end of Period]} ) DayExpand
	  return 
	  end of DayExpand(Period)) DayIndex
	  let startPeriod: start of Period + ( 24 hours * ( DayIndex - 1 ) ),
	  endPeriod: if ( hours between startPeriod and 
	    end of Period < 24
	  ) then startPeriod 
	    else start of Period + ( 24 hours * DayIndex )
	  return Tuple {
	    dayIndex: DayIndex,
	    dayPeriod: Interval[startPeriod, endPeriod )
	  }(relevantPeriod)
	  } PertinentEncounterDays
	  return Tuple {
	    encounter: PertinentEncounterDays.encounter,
	    relevantPeriod: PertinentEncounterDays.relevantPeriod,
	    relevantDays: ( PertinentEncounterDays.relevantDays EncounterDay
	        return Tuple {
	          dayIndex: EncounterDay.dayIndex,
	          dayPeriod: EncounterDay.dayPeriod,
	          hasSevereResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab1
	              where BloodGlucoseLab1.result > 300 'mg/dL'
	                and BloodGlucoseLab1.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasElevatedResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab2
	              where BloodGlucoseLab2.result >= 200 'mg/dL'
	                and BloodGlucoseLab2.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasNoResult: not exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab3
	              where BloodGlucoseLab3.relevantDatetime during EncounterDay.dayPeriod
	          )
	        }
	    )
	  } EncounterWithResultDays
	  let eligibleEventDays: EncounterWithResultDays.relevantDays EncounterDay
	    where EncounterDay.dayIndex > 1
	    return Tuple {
	      dayIndex: EncounterDay.dayIndex,
	      dayPeriod: EncounterDay.dayPeriod,
	      hasHyperglycemicEvent: ( EncounterDay.hasSevereResult
	          or ( EncounterDay.hasNoResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 2].hasElevatedResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 3].hasElevatedResult
	          )
	      )
	    }
	  return Tuple {
	    encounter: EncounterWithResultDays.encounter,
	    relevantPeriod: EncounterWithResultDays.relevantPeriod,
	    eligibleEventDays: eligibleEventDays
	  } EncounterWithEventDays
	    where EncounterWithEventDays.encounter = QualifyingEncounter
	    return Count(EncounterWithEventDays.eligibleEventDays)
	)
	)
=============================================================================================================================================================================
Measure Observation 2    :
Count (
	  singleton from ( [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Diagnosis: Diabetes" using "Diabetes (2.16.840.1.113883.3.464.1003.103.12.1001)")] DiabetesDiagnosis
	    such that DiabetesDiagnosis.prevalencePeriod starts before 
	    end of EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Medication, Administered: Hypoglycemics Treatment Medications" using "Hypoglycemics Treatment Medications (2.16.840.1.113762.1.4.1196.394)")] HypoglycemicMedication
	    such that Global.NormalizeInterval ( HypoglycemicMedication.relevantDatetime, HypoglycemicMedication.relevantPeriod ) starts during EncounterWithHospitalization.hospitalizationPeriod
	  return EncounterWithHospitalization.encounter
	  union [("Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)")] InpatientEncounter
	  with [("Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)")] BirthDate
	    such that Global.CalendarAgeInYearsAt ( BirthDate.birthDatetime, start of Global.HospitalizationWithObservation ( InpatientEncounter ) ) >= 18
	  where InpatientEncounter.relevantPeriod ends during Measurement Period QualifyingEncounter
	  return Tuple {
	    encounter: QualifyingEncounter,
	    hospitalizationPeriod: Global.HospitalizationWithObservation ( QualifyingEncounter )
	  } EncounterWithHospitalization
	  with [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab
	    such that BloodGlucoseLab.relevantDatetime during EncounterWithHospitalization.hospitalizationPeriod
	      and BloodGlucoseLab.result >= 200 'mg/dL'
	  return EncounterWithHospitalization.encounter PertinentEncounter
	  let period: Global.HospitalizationWithObservation ( PertinentEncounter ),
	  relevantPeriod: Interval[start of Period, Min({ 
	  end of Period, start of Period + 10 days }
	)](period)
	  return Tuple {
	    encounter: PertinentEncounter,
	    hospitalizationPeriod: period,
	    relevantPeriod: relevantPeriod,
	    relevantDays: ( ( expand { Interval[1, days between start of Period and 
	end of Period]} ) DayExpand
	  return 
	  end of DayExpand(Period)) DayIndex
	  let startPeriod: start of Period + ( 24 hours * ( DayIndex - 1 ) ),
	  endPeriod: if ( hours between startPeriod and 
	    end of Period < 24
	  ) then startPeriod 
	    else start of Period + ( 24 hours * DayIndex )
	  return Tuple {
	    dayIndex: DayIndex,
	    dayPeriod: Interval[startPeriod, endPeriod )
	  }(relevantPeriod)
	  } PertinentEncounterDays
	  return Tuple {
	    encounter: PertinentEncounterDays.encounter,
	    relevantPeriod: PertinentEncounterDays.relevantPeriod,
	    relevantDays: ( PertinentEncounterDays.relevantDays EncounterDay
	        return Tuple {
	          dayIndex: EncounterDay.dayIndex,
	          dayPeriod: EncounterDay.dayPeriod,
	          hasSevereResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab1
	              where BloodGlucoseLab1.result > 300 'mg/dL'
	                and BloodGlucoseLab1.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasElevatedResult: exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab2
	              where BloodGlucoseLab2.result >= 200 'mg/dL'
	                and BloodGlucoseLab2.relevantDatetime during EncounterDay.dayPeriod
	          ),
	          hasNoResult: not exists ( [("Laboratory Test, Performed: Glucose lab test" using "Glucose lab test (2.16.840.1.113762.1.4.1045.134)")] BloodGlucoseLab3
	              where BloodGlucoseLab3.relevantDatetime during EncounterDay.dayPeriod
	          )
	        }
	    )
	  } EncounterWithResultDays
	  let eligibleEventDays: EncounterWithResultDays.relevantDays EncounterDay
	    where EncounterDay.dayIndex > 1
	    return Tuple {
	      dayIndex: EncounterDay.dayIndex,
	      dayPeriod: EncounterDay.dayPeriod,
	      hasHyperglycemicEvent: ( EncounterDay.hasSevereResult
	          or ( EncounterDay.hasNoResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 2].hasElevatedResult
	              and EncounterWithResultDays.relevantDays[EncounterDay.dayIndex - 3].hasElevatedResult
	          )
	      )
	    }
	  return Tuple {
	    encounter: EncounterWithResultDays.encounter,
	    relevantPeriod: EncounterWithResultDays.relevantPeriod,
	    eligibleEventDays: eligibleEventDays
	  } EncounterWithEventDays
	    where EncounterWithEventDays.encounter = QualifyingEncounter
	    return Count(EncounterWithEventDays.eligibleEventDays EligibleEventDay
	        where EligibleEventDay.hasHyperglycemicEvent
	    )
	)
	)
