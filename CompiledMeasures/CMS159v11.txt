=============================================================================================================================================================================
Initial Population:
AgeInYearsAt(start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
).relevantDatetime, First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
).relevantPeriod))>= 12
=============================================================================================================================================================================
Denominator:
AgeInYearsAt(start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
).relevantDatetime, First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
).relevantPeriod))>= 12
=============================================================================================================================================================================
Denominator Exclusions:
exists ( ["Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)"] InpatientEncounter
    where ( InpatientEncounter.dischargeDisposition ~ code "Discharge to home for hospice care (procedure)" ("SNOMEDCT Code (428361000124107)")
        or InpatientEncounter.dischargeDisposition ~ code "Discharge to healthcare facility for hospice care (procedure)" ("SNOMEDCT Code (428371000124100)")
    )
      and InpatientEncounter.relevantPeriod ends during day of Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
)
  or exists ( ["Encounter, Performed: Hospice Encounter" using "Hospice Encounter (2.16.840.1.113883.3.464.1003.1003)"] HospiceEncounter
      where HospiceEncounter.relevantPeriod overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Assessment, Performed: Hospice care [Minimum Data Set]" using "Hospice care [Minimum Data Set] (LOINC Code 45755-6)"] HospiceAssessment
      where HospiceAssessment.result ~ code "Yes (qualifier value)" ("SNOMEDCT Code (373066001)")
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospiceAssessment.relevantDatetime, HospiceAssessment.relevantPeriod ) overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
        end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Intervention, Order: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)"] HospiceOrder
      where HospiceOrder.authorDatetime during day of Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Intervention, Performed: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)"] HospicePerformed
      where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospicePerformed.relevantDatetime, HospicePerformed.relevantPeriod ) overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Assessment, Performed: Functional Assessment of Chronic Illness Therapy - Palliative Care Questionnaire (FACIT-Pal)" using "Functional Assessment of Chronic Illness Therapy - Palliative Care Questionnaire (FACIT-Pal) (LOINC Code 71007-9)"] PalliativeAssessment
    where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PalliativeAssessment.relevantDatetime, PalliativeAssessment.relevantPeriod ) overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
    end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
)
  or exists ( ["Diagnosis: Encounter for palliative care" using "Encounter for palliative care (ICD10CM Code Z51.5)"] PalliativeDiagnosis
      where PalliativeDiagnosis.prevalencePeriod overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Encounter, Performed: Palliative Care Encounter" using "Palliative Care Encounter (2.16.840.1.113883.3.464.1003.101.12.1090)"] PalliativeEncounter
      where PalliativeEncounter.relevantPeriod overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Intervention, Performed: Palliative Care Intervention" using "Palliative Care Intervention (2.16.840.1.113883.3.464.1003.198.12.1135)"] PalliativeIntervention
      where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PalliativeIntervention.relevantDatetime, PalliativeIntervention.relevantPeriod ) overlaps Interval[start of Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ), 
      end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]]
  )
  or exists ( ["Encounter, Performed: Care Services in Long-Term Residential Facility" using "Care Services in Long-Term Residential Facility (2.16.840.1.113883.3.464.1003.101.12.1014)"] EncounterLongTermCare
    where ToDate(start of EncounterLongTermCare.relevantPeriod)on or before 
    end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]
)
  or exists ( ["Patient Characteristic Expired: Dead (finding)" using "Dead (finding) (SNOMEDCT Code 419099009)"] Deceased
    where ToDate(Deceased.expiredDatetime)occurs on or before 
    end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]
)
  or exists ( ( ["Diagnosis: Bipolar Disorder" using "Bipolar Disorder (2.16.840.1.113883.3.67.1.101.1.128)"]
    union ["Diagnosis: Personality Disorder Emotionally Labile" using "Personality Disorder Emotionally Labile (2.16.840.1.113883.3.67.1.101.1.246)"]
    union ["Diagnosis: Schizophrenia or Psychotic Disorder" using "Schizophrenia or Psychotic Disorder (2.16.840.1.113883.3.464.1003.105.12.1104)"]
    union ["Diagnosis: Pervasive Developmental Disorder" using "Pervasive Developmental Disorder (2.16.840.1.113883.3.464.1003.105.12.1152)"] ) MentalHealthDisorderDiagnoses
    where ToDate(start of MentalHealthDisorderDiagnoses.prevalencePeriod)on or before 
    end of First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]
)
=============================================================================================================================================================================
Numerator:
Last(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
    where ToDate(start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod))during First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) FirstIndexAssessment
  let YearAfterIndexAssessment: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( FirstIndexAssessment.relevantDatetime, FirstIndexAssessment.relevantPeriod ) + 12 months
  return Interval[YearAfterIndexAssessment - 60 days, YearAfterIndexAssessment + 60 days]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
).result < 5
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Denominator Exceptions:
None
=============================================================================================================================================================================
Stratification 1:
exists ( ["Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)"] BirthDate
    with First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) IndexAssessment
      such that AgeInYearsAt(date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(IndexAssessment.relevantDatetime, IndexAssessment.relevantPeriod))in Interval[12, 17]
)
=============================================================================================================================================================================
Stratification 2:
exists ( ["Patient Characteristic Birthdate: Birth date" using "Birth date (LOINC Code 21112-8)"] BirthDate
    with First(["Assessment, Performed: PHQ 9 and PHQ 9M Tools" using "PHQ 9 and PHQ 9M Tools (2.16.840.1.113883.3.67.1.101.1.263)"] DepressionAssessment
  where DepressionAssessment.result > 9 DepressionAssessment
    with ["Encounter, Performed: Contact or Office Visit" using "Contact or Office Visit (2.16.840.1.113762.1.4.1080.5)"] ValidEncounter
  with ["Diagnosis: Major Depression Including Remission" using "Major Depression Including Remission (2.16.840.113883.3.67.1.101.3.2444)"]
  union ["Diagnosis: Dysthymia" using "Dysthymia (2.16.840.1.113883.3.67.1.101.1.254)"] Depression
    such that ValidEncounter.relevantPeriod overlaps Depression.prevalencePeriod
      and ValidEncounter.relevantPeriod ends during Interval[start of Measurement Period - 14 months, start of Measurement Period - 2 months ) DepressionEncounter
      such that if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)is not null
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(DepressionAssessment.relevantDatetime, DepressionAssessment.relevantPeriod)during Interval[ToDate((start of DepressionEncounter.relevantPeriod)- 7 days), 
        end of DepressionEncounter.relevantPeriod]
    sort by start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(relevantDatetime, relevantPeriod)
) IndexAssessment
      such that AgeInYearsAt(date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime>(IndexAssessment.relevantDatetime, IndexAssessment.relevantPeriod))>= 18
)
