=============================================================================================================================================================================
Initial Population:
AgeInYearsAt(date from start of Measurement Period)>= 18
  and exists ( ["Diagnosis: Heart Failure" using "Heart Failure (2.16.840.1.113883.3.526.3.376)"] HeartFailure
      where HeartFailure.prevalencePeriod overlaps before Measurement Period
  )
  and exists ( from
  ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period OfficeVisit1,
  ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period OfficeVisit2
  where OfficeVisit2.relevantPeriod starts 1 day or more after day of 
  end of OfficeVisit1.relevantPeriod
  return OfficeVisit1 )
=============================================================================================================================================================================
Denominator:
AgeInYearsAt(date from start of Measurement Period)>= 18
  and exists ( ["Diagnosis: Heart Failure" using "Heart Failure (2.16.840.1.113883.3.526.3.376)"] HeartFailure
      where HeartFailure.prevalencePeriod overlaps before Measurement Period
  )
  and exists ( from
  ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period OfficeVisit1,
  ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period OfficeVisit2
  where OfficeVisit2.relevantPeriod starts 1 day or more after day of 
  end of OfficeVisit1.relevantPeriod
  return OfficeVisit1 )
=============================================================================================================================================================================
Denominator Exclusions:
Hospice.exists ( ["Encounter, Performed: Encounter Inpatient" using "Encounter Inpatient (2.16.840.1.113883.3.666.5.307)"] InpatientEncounter
    where ( InpatientEncounter.dischargeDisposition ~ code "Discharge to home for hospice care (procedure)" ("SNOMEDCT Code (428361000124107)")
        or InpatientEncounter.dischargeDisposition ~ code "Discharge to healthcare facility for hospice care (procedure)" ("SNOMEDCT Code (428371000124100)")
    )
      and InpatientEncounter.relevantPeriod ends during day of Measurement Period
)
  or exists ( ["Encounter, Performed: Hospice Encounter" using "Hospice Encounter (2.16.840.1.113883.3.464.1003.1003)"] HospiceEncounter
      where HospiceEncounter.relevantPeriod overlaps Measurement Period
  )
  or exists ( ["Assessment, Performed: Hospice care [Minimum Data Set]" using "Hospice care [Minimum Data Set] (LOINC Code 45755-6)"] HospiceAssessment
      where HospiceAssessment.result ~ code "Yes (qualifier value)" ("SNOMEDCT Code (373066001)")
        and if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospiceAssessment.relevantDatetime, HospiceAssessment.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( ["Intervention, Order: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)"] HospiceOrder
      where HospiceOrder.authorDatetime during day of Measurement Period
  )
  or exists ( ["Intervention, Performed: Hospice Care Ambulatory" using "Hospice Care Ambulatory (2.16.840.1.113883.3.526.3.1584)"] HospicePerformed
      where if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( HospicePerformed.relevantDatetime, HospicePerformed.relevantPeriod ) overlaps Measurement Period
  )
  or exists ( ["Diagnosis: Severe dementia (disorder)" using "Severe dementia (disorder) (SNOMEDCT Code 428351000124105)"] Dementia
      where Dementia.prevalencePeriod overlaps Measurement Period
  )
=============================================================================================================================================================================
Numerator:
( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: PROMIS-10 Global Mental Health (GMH) score T-score" using "PROMIS-10 Global Mental Health (GMH) score T-score (LOINC Code 71969-0)"] PROMIS10MentalScore,
  ["Assessment, Performed: PROMIS-10 Global Physical Health (GPH) score T-score" using "PROMIS-10 Global Physical Health (GPH) score T-score (LOINC Code 71971-6)"] PROMIS10PhysicalScore
  let PROMIS10MentalScoreTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10MentalScore.relevantDatetime, PROMIS10MentalScore.relevantPeriod ),
  PROMIS10PhysicalScoreTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10PhysicalScore.relevantDatetime, PROMIS10PhysicalScore.relevantPeriod )
  where PROMIS10MentalScoreTime same day as PROMIS10PhysicalScoreTime
    and PROMIS10PhysicalScore.result is not null
    and PROMIS10MentalScore.result is not null
  return Max({ PROMIS10MentalScoreTime, PROMIS10PhysicalScoreTime }) InitialPROMIS10Time,
    from
  ["Assessment, Performed: PROMIS-10 Global Mental Health (GMH) score T-score" using "PROMIS-10 Global Mental Health (GMH) score T-score (LOINC Code 71969-0)"] PROMIS10MentalScore,
  ["Assessment, Performed: PROMIS-10 Global Physical Health (GPH) score T-score" using "PROMIS-10 Global Physical Health (GPH) score T-score (LOINC Code 71971-6)"] PROMIS10PhysicalScore
  let PROMIS10MentalScoreTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10MentalScore.relevantDatetime, PROMIS10MentalScore.relevantPeriod ),
  PROMIS10PhysicalScoreTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( PROMIS10PhysicalScore.relevantDatetime, PROMIS10PhysicalScore.relevantPeriod )
  where PROMIS10MentalScoreTime same day as PROMIS10PhysicalScoreTime
    and PROMIS10PhysicalScore.result is not null
    and PROMIS10MentalScore.result is not null
  return Max({ PROMIS10MentalScoreTime, PROMIS10PhysicalScoreTime }) FollowUpPROMIS10Time
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialPROMIS10Time 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpPROMIS10Time during day of Interval[date from InitialPROMIS10Time + 30 days, date from InitialPROMIS10Time + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: PROMIS-29 Sleep disturbance score T-score" using "PROMIS-29 Sleep disturbance score T-score (LOINC Code 71955-9)"] Promis29Sleep,
  ["Assessment, Performed: PROMIS-29 Satisfaction with participation in social roles score T-score" using "PROMIS-29 Satisfaction with participation in social roles score T-score (LOINC Code 71957-5)"] Promis29SocialRoles,
  ["Assessment, Performed: PROMIS-29 Physical function score T-score" using "PROMIS-29 Physical function score T-score (LOINC Code 71959-1)"] Promis29Physical,
  ["Assessment, Performed: PROMIS-29 Pain interference score T-score" using "PROMIS-29 Pain interference score T-score (LOINC Code 71961-7)"] Promis29Pain,
  ["Assessment, Performed: PROMIS-29 Fatigue score T-score" using "PROMIS-29 Fatigue score T-score (LOINC Code 71963-3)"] Promis29Fatigue,
  ["Assessment, Performed: PROMIS-29 Depression score T-score" using "PROMIS-29 Depression score T-score (LOINC Code 71965-8)"] Promis29Depression,
  ["Assessment, Performed: PROMIS-29 Anxiety score T-score" using "PROMIS-29 Anxiety score T-score (LOINC Code 71967-4)"] Promis29Anxiety
  let Promis29SleepTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Sleep.relevantDatetime, Promis29Sleep.relevantPeriod ),
  Promis29SocialRolesTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29SocialRoles.relevantDatetime, Promis29SocialRoles.relevantPeriod ),
  Promis29PhysicalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Physical.relevantDatetime, Promis29Physical.relevantPeriod ),
  Promis29PainTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Pain.relevantDatetime, Promis29Pain.relevantPeriod ),
  Promis29FatigueTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Fatigue.relevantDatetime, Promis29Fatigue.relevantPeriod ),
  Promis29DepressionTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Depression.relevantDatetime, Promis29Depression.relevantPeriod ),
  Promis29AnxietyTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Anxiety.relevantDatetime, Promis29Anxiety.relevantPeriod )
  where Promis29SleepTime same day as Promis29SocialRolesTime
    and Promis29SocialRoles.result is not null
    and Promis29SleepTime same day as Promis29PhysicalTime
    and Promis29Physical.result is not null
    and Promis29SleepTime same day as Promis29PainTime
    and Promis29Pain.result is not null
    and Promis29SleepTime same day as Promis29FatigueTime
    and Promis29Fatigue.result is not null
    and Promis29SleepTime same day as Promis29DepressionTime
    and Promis29Depression.result is not null
    and Promis29SleepTime same day as Promis29AnxietyTime
    and Promis29Anxiety.result is not null
    and Promis29Sleep.result is not null
  return Max({ Promis29SleepTime, Promis29SocialRolesTime, Promis29PhysicalTime, Promis29PainTime, Promis29FatigueTime, Promis29DepressionTime, Promis29AnxietyTime }) InitialPROMIS29Time,
    from
  ["Assessment, Performed: PROMIS-29 Sleep disturbance score T-score" using "PROMIS-29 Sleep disturbance score T-score (LOINC Code 71955-9)"] Promis29Sleep,
  ["Assessment, Performed: PROMIS-29 Satisfaction with participation in social roles score T-score" using "PROMIS-29 Satisfaction with participation in social roles score T-score (LOINC Code 71957-5)"] Promis29SocialRoles,
  ["Assessment, Performed: PROMIS-29 Physical function score T-score" using "PROMIS-29 Physical function score T-score (LOINC Code 71959-1)"] Promis29Physical,
  ["Assessment, Performed: PROMIS-29 Pain interference score T-score" using "PROMIS-29 Pain interference score T-score (LOINC Code 71961-7)"] Promis29Pain,
  ["Assessment, Performed: PROMIS-29 Fatigue score T-score" using "PROMIS-29 Fatigue score T-score (LOINC Code 71963-3)"] Promis29Fatigue,
  ["Assessment, Performed: PROMIS-29 Depression score T-score" using "PROMIS-29 Depression score T-score (LOINC Code 71965-8)"] Promis29Depression,
  ["Assessment, Performed: PROMIS-29 Anxiety score T-score" using "PROMIS-29 Anxiety score T-score (LOINC Code 71967-4)"] Promis29Anxiety
  let Promis29SleepTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Sleep.relevantDatetime, Promis29Sleep.relevantPeriod ),
  Promis29SocialRolesTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29SocialRoles.relevantDatetime, Promis29SocialRoles.relevantPeriod ),
  Promis29PhysicalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Physical.relevantDatetime, Promis29Physical.relevantPeriod ),
  Promis29PainTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Pain.relevantDatetime, Promis29Pain.relevantPeriod ),
  Promis29FatigueTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Fatigue.relevantDatetime, Promis29Fatigue.relevantPeriod ),
  Promis29DepressionTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Depression.relevantDatetime, Promis29Depression.relevantPeriod ),
  Promis29AnxietyTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( Promis29Anxiety.relevantDatetime, Promis29Anxiety.relevantPeriod )
  where Promis29SleepTime same day as Promis29SocialRolesTime
    and Promis29SocialRoles.result is not null
    and Promis29SleepTime same day as Promis29PhysicalTime
    and Promis29Physical.result is not null
    and Promis29SleepTime same day as Promis29PainTime
    and Promis29Pain.result is not null
    and Promis29SleepTime same day as Promis29FatigueTime
    and Promis29Fatigue.result is not null
    and Promis29SleepTime same day as Promis29DepressionTime
    and Promis29Depression.result is not null
    and Promis29SleepTime same day as Promis29AnxietyTime
    and Promis29Anxiety.result is not null
    and Promis29Sleep.result is not null
  return Max({ Promis29SleepTime, Promis29SocialRolesTime, Promis29PhysicalTime, Promis29PainTime, Promis29FatigueTime, Promis29DepressionTime, Promis29AnxietyTime }) FollowUpPROMIS29Time
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialPROMIS29Time 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpPROMIS29Time during day of Interval[date from InitialPROMIS29Time + 30 days, date from InitialPROMIS29Time + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: VR-12 Mental component summary (MCS) score - oblique method T-score" using "VR-12 Mental component summary (MCS) score - oblique method T-score (LOINC Code 72026-8)"] VR12MentalAssessment,
  ["Assessment, Performed: VR-12 Physical component summary (PCS) score - oblique method T-score" using "VR-12 Physical component summary (PCS) score - oblique method T-score (LOINC Code 72025-0)"] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) InitialVR12ObliqueTime,
    from
  ["Assessment, Performed: VR-12 Mental component summary (MCS) score - oblique method T-score" using "VR-12 Mental component summary (MCS) score - oblique method T-score (LOINC Code 72026-8)"] VR12MentalAssessment,
  ["Assessment, Performed: VR-12 Physical component summary (PCS) score - oblique method T-score" using "VR-12 Physical component summary (PCS) score - oblique method T-score (LOINC Code 72025-0)"] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) FollowUpVR12ObliqueTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialVR12ObliqueTime 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpVR12ObliqueTime during day of Interval[date from InitialVR12ObliqueTime + 30 days, date from InitialVR12ObliqueTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: VR-12 Mental component summary (MCS) score - orthogonal method T-score" using "VR-12 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72028-4)"] VR12MentalAssessment,
  ["Assessment, Performed: VR-12 Physical component summary (PCS) score - orthogonal method T-score" using "VR-12 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72027-6)"] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) InitialVR12OrthogonalTime,
    from
  ["Assessment, Performed: VR-12 Mental component summary (MCS) score - orthogonal method T-score" using "VR-12 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72028-4)"] VR12MentalAssessment,
  ["Assessment, Performed: VR-12 Physical component summary (PCS) score - orthogonal method T-score" using "VR-12 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72027-6)"] VR12PhysicalAssessment
  let VR12MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12MentalAssessment.relevantDatetime, VR12MentalAssessment.relevantPeriod ),
  VR12PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR12PhysicalAssessment.relevantDatetime, VR12PhysicalAssessment.relevantPeriod )
  where VR12MentalAssessmentTime same day as VR12PhysicalAssessmentTime
    and VR12MentalAssessment.result is not null
    and VR12PhysicalAssessment.result is not null
  return Max({ VR12MentalAssessmentTime, VR12PhysicalAssessmentTime }) FollowUpVR12OrthogonalTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialVR12OrthogonalTime 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpVR12OrthogonalTime during day of Interval[date from InitialVR12OrthogonalTime + 30 days, date from InitialVR12OrthogonalTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: VR-36 Mental component summary (MCS) score - oblique method T-score" using "VR-36 Mental component summary (MCS) score - oblique method T-score (LOINC Code 71990-6)"] VR36MentalAssessment,
  ["Assessment, Performed: VR-36 Physical component summary (PCS) score - oblique method T-score" using "VR-36 Physical component summary (PCS) score - oblique method T-score (LOINC Code 71989-8)"] VR36PhysicalAssessment
  let VR36MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36MentalAssessment.relevantDatetime, VR36MentalAssessment.relevantPeriod ),
  VR36PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36PhysicalAssessment.relevantDatetime, VR36PhysicalAssessment.relevantPeriod )
  where VR36MentalAssessmentTime same day as VR36PhysicalAssessmentTime
    and VR36MentalAssessment.result is not null
    and VR36PhysicalAssessment.result is not null
  return Max({ VR36MentalAssessmentTime, VR36PhysicalAssessmentTime }) InitialVR36ObliqueTime,
    from
  ["Assessment, Performed: VR-36 Mental component summary (MCS) score - oblique method T-score" using "VR-36 Mental component summary (MCS) score - oblique method T-score (LOINC Code 71990-6)"] VR36MentalAssessment,
  ["Assessment, Performed: VR-36 Physical component summary (PCS) score - oblique method T-score" using "VR-36 Physical component summary (PCS) score - oblique method T-score (LOINC Code 71989-8)"] VR36PhysicalAssessment
  let VR36MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36MentalAssessment.relevantDatetime, VR36MentalAssessment.relevantPeriod ),
  VR36PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36PhysicalAssessment.relevantDatetime, VR36PhysicalAssessment.relevantPeriod )
  where VR36MentalAssessmentTime same day as VR36PhysicalAssessmentTime
    and VR36MentalAssessment.result is not null
    and VR36PhysicalAssessment.result is not null
  return Max({ VR36MentalAssessmentTime, VR36PhysicalAssessmentTime }) FollowUpVR36ObliqueTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialVR36ObliqueTime 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpVR36ObliqueTime during day of Interval[date from InitialVR36ObliqueTime + 30 days, date from InitialVR36ObliqueTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: VR-36 Mental component summary (MCS) score - orthogonal method T-score" using "VR-36 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72008-6)"] VR36MentalAssessment,
  ["Assessment, Performed: VR-36 Physical component summary (PCS) score - orthogonal method T-score" using "VR-36 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72007-8)"] VR36PhysicalAssessment
  let VR36MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36MentalAssessment.relevantDatetime, VR36MentalAssessment.relevantPeriod ),
  VR36PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36PhysicalAssessment.relevantDatetime, VR36PhysicalAssessment.relevantPeriod )
  where VR36MentalAssessmentTime same day as VR36PhysicalAssessmentTime
    and VR36MentalAssessment.result is not null
    and VR36PhysicalAssessment.result is not null
  return Max({ VR36MentalAssessmentTime, VR36PhysicalAssessmentTime }) InitialVR36OrthogonalTime,
    from
  ["Assessment, Performed: VR-36 Mental component summary (MCS) score - orthogonal method T-score" using "VR-36 Mental component summary (MCS) score - orthogonal method T-score (LOINC Code 72008-6)"] VR36MentalAssessment,
  ["Assessment, Performed: VR-36 Physical component summary (PCS) score - orthogonal method T-score" using "VR-36 Physical component summary (PCS) score - orthogonal method T-score (LOINC Code 72007-8)"] VR36PhysicalAssessment
  let VR36MentalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36MentalAssessment.relevantDatetime, VR36MentalAssessment.relevantPeriod ),
  VR36PhysicalAssessmentTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( VR36PhysicalAssessment.relevantDatetime, VR36PhysicalAssessment.relevantPeriod )
  where VR36MentalAssessmentTime same day as VR36PhysicalAssessmentTime
    and VR36MentalAssessment.result is not null
    and VR36PhysicalAssessment.result is not null
  return Max({ VR36MentalAssessmentTime, VR36PhysicalAssessmentTime }) FollowUpVR36OrthogonalTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialVR36OrthogonalTime 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpVR36OrthogonalTime during day of Interval[date from InitialVR36OrthogonalTime + 30 days, date from InitialVR36OrthogonalTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: Physical score [MLHFQ]" using "Physical score [MLHFQ] (LOINC Code 85618-7)"] MLHFQPhysical,
  ["Assessment, Performed: Emotional score [MLHFQ]" using "Emotional score [MLHFQ] (LOINC Code 85609-6)"] MLHFQEmotional
  let MLHFQPhysicalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( MLHFQPhysical.relevantDatetime, MLHFQPhysical.relevantPeriod ),
  MLHFQEmotionalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( MLHFQEmotional.relevantDatetime, MLHFQEmotional.relevantPeriod )
  where MLHFQPhysicalTime same day as MLHFQEmotionalTime
    and MLHFQEmotional.result is not null
    and MLHFQPhysical.result is not null
  return Max({ MLHFQPhysicalTime, MLHFQEmotionalTime }) InitialMLHFQTime,
    from
  ["Assessment, Performed: Physical score [MLHFQ]" using "Physical score [MLHFQ] (LOINC Code 85618-7)"] MLHFQPhysical,
  ["Assessment, Performed: Emotional score [MLHFQ]" using "Emotional score [MLHFQ] (LOINC Code 85609-6)"] MLHFQEmotional
  let MLHFQPhysicalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( MLHFQPhysical.relevantDatetime, MLHFQPhysical.relevantPeriod ),
  MLHFQEmotionalTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( MLHFQEmotional.relevantDatetime, MLHFQEmotional.relevantPeriod )
  where MLHFQPhysicalTime same day as MLHFQEmotionalTime
    and MLHFQEmotional.result is not null
    and MLHFQPhysical.result is not null
  return Max({ MLHFQPhysicalTime, MLHFQEmotionalTime }) FollowUpMLHFQTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialMLHFQTime 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpMLHFQTime during day of Interval[date from InitialMLHFQTime + 30 days, date from InitialMLHFQTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: Kansas City Cardiomyopathy Questionnaire - 12 item [KCCQ-12]" using "Kansas City Cardiomyopathy Questionnaire - 12 item [KCCQ-12] (LOINC Code 86923-0)"] KCCQ12Item,
  ["Assessment, Performed: Overall summary score [KCCQ-12]" using "Overall summary score [KCCQ-12] (LOINC Code 86924-8)"] KCCQ12Summary
  let KCCQ12ItemTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQ12Item.relevantDatetime, KCCQ12Item.relevantPeriod ),
  KCCQ12SummaryTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQ12Summary.relevantDatetime, KCCQ12Summary.relevantPeriod )
  where KCCQ12ItemTime same day as KCCQ12SummaryTime
    and KCCQ12Summary.result is not null
    and KCCQ12Item.result is not null
  return Max({ KCCQ12ItemTime, KCCQ12SummaryTime }) InitialKCCQ12Time,
    from
  ["Assessment, Performed: Kansas City Cardiomyopathy Questionnaire - 12 item [KCCQ-12]" using "Kansas City Cardiomyopathy Questionnaire - 12 item [KCCQ-12] (LOINC Code 86923-0)"] KCCQ12Item,
  ["Assessment, Performed: Overall summary score [KCCQ-12]" using "Overall summary score [KCCQ-12] (LOINC Code 86924-8)"] KCCQ12Summary
  let KCCQ12ItemTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQ12Item.relevantDatetime, KCCQ12Item.relevantPeriod ),
  KCCQ12SummaryTime: date from start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQ12Summary.relevantDatetime, KCCQ12Summary.relevantPeriod )
  where KCCQ12ItemTime same day as KCCQ12SummaryTime
    and KCCQ12Summary.result is not null
    and KCCQ12Item.result is not null
  return Max({ KCCQ12ItemTime, KCCQ12SummaryTime }) FollowUpKCCQ12Time
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialKCCQ12Time 14 days or less on or before day of 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpKCCQ12Time during day of Interval[date from InitialKCCQ12Time + 30 days, date from InitialKCCQ12Time + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    from
  ["Assessment, Performed: Quality of life score [KCCQ]" using "Quality of life score [KCCQ] (LOINC Code 72189-4)"] KCCQLifeQuality,
  ["Assessment, Performed: Symptom stability score [KCCQ]" using "Symptom stability score [KCCQ] (LOINC Code 72194-4)"] KCCQSymptomStability,
  ["Assessment, Performed: Self-efficacy score [KCCQ]" using "Self-efficacy score [KCCQ] (LOINC Code 72190-2)"] KCCQSelfEfficacy,
  ["Assessment, Performed: Total symptom score [KCCQ]" using "Total symptom score [KCCQ] (LOINC Code 72191-0)"] KCCQSymptoms,
  ["Assessment, Performed: Physical limitation score [KCCQ]" using "Physical limitation score [KCCQ] (LOINC Code 72195-1)"] KCCQPhysicalLimits,
  ["Assessment, Performed: Social limitation score [KCCQ]" using "Social limitation score [KCCQ] (LOINC Code 72196-9)"] KCCQSocialLimits
  let KCCQLifeQualityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQLifeQuality.relevantDatetime, KCCQLifeQuality.relevantPeriod ),
  KCCQSymptomStabilityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSymptomStability.relevantDatetime, KCCQSymptomStability.relevantPeriod ),
  KCCQSelfEfficacyTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSelfEfficacy.relevantDatetime, KCCQSelfEfficacy.relevantPeriod ),
  KCCQSymptomsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSymptoms.relevantDatetime, KCCQSymptoms.relevantPeriod ),
  KCCQPhysicalLimitsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQPhysicalLimits.relevantDatetime, KCCQPhysicalLimits.relevantPeriod ),
  KCCQSocialLimitsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSocialLimits.relevantDatetime, KCCQSocialLimits.relevantPeriod )
  where KCCQLifeQualityTime same day as KCCQSymptomStabilityTime
    and KCCQSymptomStability.result is not null
    and KCCQLifeQualityTime same day as KCCQSelfEfficacyTime
    and KCCQSelfEfficacy.result is not null
    and KCCQLifeQualityTime same day as KCCQSymptomsTime
    and KCCQSymptoms.result is not null
    and KCCQLifeQualityTime same day as KCCQPhysicalLimitsTime
    and KCCQPhysicalLimits.result is not null
    and KCCQLifeQualityTime same day as KCCQSocialLimitsTime
    and KCCQSocialLimits.result is not null
    and KCCQLifeQuality.result is not null
  return Max({ KCCQLifeQualityTime, KCCQSymptomStabilityTime, KCCQSelfEfficacyTime, KCCQSymptomsTime, KCCQPhysicalLimitsTime, KCCQSocialLimitsTime }) InitialKCCQAssessmentTime,
    from
  ["Assessment, Performed: Quality of life score [KCCQ]" using "Quality of life score [KCCQ] (LOINC Code 72189-4)"] KCCQLifeQuality,
  ["Assessment, Performed: Symptom stability score [KCCQ]" using "Symptom stability score [KCCQ] (LOINC Code 72194-4)"] KCCQSymptomStability,
  ["Assessment, Performed: Self-efficacy score [KCCQ]" using "Self-efficacy score [KCCQ] (LOINC Code 72190-2)"] KCCQSelfEfficacy,
  ["Assessment, Performed: Total symptom score [KCCQ]" using "Total symptom score [KCCQ] (LOINC Code 72191-0)"] KCCQSymptoms,
  ["Assessment, Performed: Physical limitation score [KCCQ]" using "Physical limitation score [KCCQ] (LOINC Code 72195-1)"] KCCQPhysicalLimits,
  ["Assessment, Performed: Social limitation score [KCCQ]" using "Social limitation score [KCCQ] (LOINC Code 72196-9)"] KCCQSocialLimits
  let KCCQLifeQualityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQLifeQuality.relevantDatetime, KCCQLifeQuality.relevantPeriod ),
  KCCQSymptomStabilityTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSymptomStability.relevantDatetime, KCCQSymptomStability.relevantPeriod ),
  KCCQSelfEfficacyTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSelfEfficacy.relevantDatetime, KCCQSelfEfficacy.relevantPeriod ),
  KCCQSymptomsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSymptoms.relevantDatetime, KCCQSymptoms.relevantPeriod ),
  KCCQPhysicalLimitsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQPhysicalLimits.relevantDatetime, KCCQPhysicalLimits.relevantPeriod ),
  KCCQSocialLimitsTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSocialLimits.relevantDatetime, KCCQSocialLimits.relevantPeriod )
  where KCCQLifeQualityTime same day as KCCQSymptomStabilityTime
    and KCCQSymptomStability.result is not null
    and KCCQLifeQualityTime same day as KCCQSelfEfficacyTime
    and KCCQSelfEfficacy.result is not null
    and KCCQLifeQualityTime same day as KCCQSymptomsTime
    and KCCQSymptoms.result is not null
    and KCCQLifeQualityTime same day as KCCQPhysicalLimitsTime
    and KCCQPhysicalLimits.result is not null
    and KCCQLifeQualityTime same day as KCCQSocialLimitsTime
    and KCCQSocialLimits.result is not null
    and KCCQLifeQuality.result is not null
  return Max({ KCCQLifeQualityTime, KCCQSymptomStabilityTime, KCCQSelfEfficacyTime, KCCQSymptomsTime, KCCQPhysicalLimitsTime, KCCQSocialLimitsTime }) FollowUpKCCQAssessmentTime
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialKCCQAssessmentTime 14 days or less on or before 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpKCCQAssessmentTime during day of Interval[date from InitialKCCQAssessmentTime + 30 days, date from InitialKCCQAssessmentTime + 180 days]
    return ValidEncounters
) )
  or ( exists ( from
    ( ["Encounter, Performed: Office Visit" using "Office Visit (2.16.840.1.113883.3.464.1003.101.12.1001)"]
  union ["Encounter, Performed: Telephone Visits" using "Telephone Visits (2.16.840.1.113883.3.464.1003.101.12.1080)"]
  union ["Encounter, Performed: Online Assessments" using "Online Assessments (2.16.840.1.113883.3.464.1003.101.12.1089)"] ) ValidEncounters
  where ValidEncounters.relevantPeriod during day of Measurement Period ValidEncounters,
    ["Assessment, Performed: Overall summary score [KCCQ]" using "Overall summary score [KCCQ] (LOINC Code 71940-1)"] KCCQSummaryScore
  let KCCQSummaryScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSummaryScore.relevantDatetime, KCCQSummaryScore.relevantPeriod )
  where KCCQSummaryScore.result is not null
  return Max({ KCCQSummaryScoreTime }) InitialKCCQTotalScore,
    ["Assessment, Performed: Overall summary score [KCCQ]" using "Overall summary score [KCCQ] (LOINC Code 71940-1)"] KCCQSummaryScore
  let KCCQSummaryScoreTime: start of if pointInTime is not null then Interval[pointInTime, pointInTime]
  else if period is not null then period 
  else null as Interval<DateTime> ( KCCQSummaryScore.relevantDatetime, KCCQSummaryScore.relevantPeriod )
  where KCCQSummaryScore.result is not null
  return Max({ KCCQSummaryScoreTime }) FollowUpKCCQTotalScore
    where ValidEncounters.relevantPeriod ends 180 days or more before 
    end of Measurement Period
      and InitialKCCQTotalScore 14 days or less on or before 
      end of ValidEncounters.relevantPeriod
      and date from FollowUpKCCQTotalScore during day of Interval[date from InitialKCCQTotalScore + 30 days, date from InitialKCCQTotalScore + 180 days]
    return ValidEncounters
) )
=============================================================================================================================================================================
Numerator Exclusions:
None
=============================================================================================================================================================================
Denominator Exceptions:
None
=============================================================================================================================================================================
Stratification:
None
